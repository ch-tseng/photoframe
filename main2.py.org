from picamera import PiCamera
from time import sleep

import cv2
import numpy as np
import json

import Adafruit_ILI9341 as TFT
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BCM)
import Adafruit_GPIO.SPI as SPI
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont

from os.path import join, dirname
from os import environ
from watson_developer_cloud import VisualRecognitionV3
visual_recognition = VisualRecognitionV3('2016-05-20', api_key='5cdc66469259c6a4f2ffa532775ec86741e4f71b')


camera = PiCamera()
camera.resolution = (640, 480)
camera.rotation = 270
camera.hflip = True
camera.vflip = False
camera.brightness = 60
camera.ISO = 800
#------------------------------------------------------------------
# Raspberry Pi configuration.
DC = 18
RST = 23
SPI_PORT = 0
SPI_DEVICE = 0

font = ImageFont.truetype('fonts/zh-TW.ttf', 21)
# Create TFT LCD display class.
disp = TFT.ILI9341(DC, rst=RST, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=64000000))
# Initialize display.
disp.begin()

image = Image.open("face.png")
image = image.rotate(180).resize((240, 320))
#image = image.resize((240,320))
#disp.clear((0, 0, 0))
disp.display(image)
#---------------------------------------------------------------------

def checkFace(imgfilePath, ynWatson = 0):

    displayImg = Image.open(imgfilePath)
    displayImg = displayImg.resize((240, 320))
    disp.display(displayImg)

    image = cv2.imread(imgfilePath)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    face_cascade = cv2.CascadeClassifier('/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml')
    eye_cascade = cv2.CascadeClassifier('/usr/local/share/OpenCV/haarcascades/haarcascade_eye.xml')

    faces = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.1,
        minNeighbors=1,
        minSize=(30, 30)
    )
    facesNow = len(faces)
    print ("Faces = " + str(facesNow))

    if(facesNow>0):

        for (x,y,w,h) in faces:
            cv2.rectangle(image,(x,y),(x+w,y+h),(0,0,255),2)

        cv2.imwrite("cv2.jpg", image)

        displayImg = Image.open("cv2.jpg")
        disp.display(displayImg.resize((240, 320)))

        if (ynWatson==1):
            with open(join(dirname(__file__), imgfilePath), 'rb') as image_file:
                results = visual_recognition.detect_faces(images_file=image_file)
                print(json.dumps(results))



while True:
    camera.capture('camera.jpg')
    checkFace("camera.jpg",1)
